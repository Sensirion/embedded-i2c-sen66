/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.0.1
 * Product:       sen66
 * Model-Version: 1.2.0
 */

#include "sen66_i2c.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

void print_byte_array(uint8_t* array, uint16_t len) {
    uint16_t i = 0;
    printf("0x");
    for (; i < len; i++) {
        printf("%02x", array[i]);
    }
}

TEST_GROUP (SEN66_Tests) {
    void setup() {
        sen66_init(0x6B);
    }
};

TEST (SEN66_Tests, test_perform_forced_co2_recalibration1) {
    int16_t local_error = 0;
    uint16_t correction = 0;
    local_error = sen66_perform_forced_co2_recalibration(600, &correction);
    CHECK_EQUAL_ZERO_TEXT(local_error, "perform_forced_co2_recalibration");
    printf("correction: %u\n", correction);
}

TEST (SEN66_Tests, test_get_product_name1) {
    int16_t local_error = 0;
    uint8_t product_name[32] = {0};
    local_error = sen66_get_product_name(product_name, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_product_name");
    printf("product_name: ");
    print_byte_array(product_name, 32);
    printf("\n");
}

TEST (SEN66_Tests, test_get_serial_number1) {
    int16_t local_error = 0;
    uint8_t serial_number[32] = {0};
    local_error = sen66_get_serial_number(serial_number, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_serial_number");
    printf("serial_number: ");
    print_byte_array(serial_number, 32);
    printf("\n");
}

TEST (SEN66_Tests, test_get_version1) {
    int16_t local_error = 0;
    uint8_t firmware_major = 0;
    uint8_t firmware_minor = 0;
    bool firmware_debug = false;
    uint8_t hardware_major = 0;
    uint8_t hardware_minor = 0;
    uint8_t protocol_major = 0;
    uint8_t protocol_minor = 0;
    uint8_t padding = 0;
    local_error = sen66_get_version(
        &firmware_major, &firmware_minor, &firmware_debug, &hardware_major,
        &hardware_minor, &protocol_major, &protocol_minor, &padding);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_version");
    printf("firmware_major: %u ", firmware_major);
    printf("firmware_minor: %u ", firmware_minor);
    printf("firmware_debug: %d ", firmware_debug);
    printf("hardware_major: %u ", hardware_major);
    printf("hardware_minor: %u ", hardware_minor);
    printf("protocol_major: %u ", protocol_major);
    printf("protocol_minor: %u ", protocol_minor);
    printf("padding: %u\n", padding);
}

TEST (SEN66_Tests, test_device_reset1) {
    int16_t local_error = 0;
    local_error = sen66_device_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "device_reset");
}

TEST (SEN66_Tests, test_start_continuous_measurement1) {
    int16_t local_error = 0;
    uint16_t mass_concentration_pm1p0 = 0;
    uint16_t mass_concentration_pm2p5 = 0;
    uint16_t mass_concentration_pm4p0 = 0;
    uint16_t mass_concentration_pm10p0 = 0;
    int16_t ambient_humidity = 0;
    int16_t ambient_temperature = 0;
    int16_t voc_index = 0;
    int16_t nox_index = 0;
    uint16_t co2 = 0;
    uint8_t padding = 0;
    bool data_ready = false;
    local_error = sen66_start_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_continuous_measurement");
    local_error = sen66_read_measured_values_as_integers(
        &mass_concentration_pm1p0, &mass_concentration_pm2p5,
        &mass_concentration_pm4p0, &mass_concentration_pm10p0,
        &ambient_humidity, &ambient_temperature, &voc_index, &nox_index, &co2);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measured_values_as_integers");
    printf("mass_concentration_pm1p0: %u ", mass_concentration_pm1p0);
    printf("mass_concentration_pm2p5: %u ", mass_concentration_pm2p5);
    printf("mass_concentration_pm4p0: %u ", mass_concentration_pm4p0);
    printf("mass_concentration_pm10p0: %u ", mass_concentration_pm10p0);
    printf("ambient_humidity: %i ", ambient_humidity);
    printf("ambient_temperature: %i ", ambient_temperature);
    printf("voc_index: %i ", voc_index);
    printf("nox_index: %i ", nox_index);
    printf("co2: %u\n", co2);
    local_error = sen66_get_data_ready(&padding, &data_ready);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_data_ready");
    printf("padding: %u ", padding);
    printf("data_ready: %d\n", data_ready);
    local_error = sen66_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}
